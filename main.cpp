/*
 * –ß–ò–°–õ–û–í–û–ô –ê–ö–ò–ù–ê–¢–û–† - –ü–û–î–†–û–ë–ù–´–ï –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –î–õ–Ø –ù–û–í–ò–ß–ö–û–í
 * 
 * –≠—Ç–æ –∫–æ–Ω—Å–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞, –≥–¥–µ –∫–æ–º–ø—å—é—Ç–µ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –∑–∞ –º–∞–∫—Å–∏–º—É–º 5 –ø–æ–ø—ã—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –∞–ª–≥–æ—Ä–∏—Ç–º –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
 * 
 * –û–°–ù–û–í–ù–´–ï –ö–û–ù–¶–ï–ü–¶–ò–ò:
 * 1. –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ - –¥–µ–ª–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ø–æ–ª–∞–º –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
 * 2. –ö–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏
 * 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
 * 4. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã - –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
 */

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
#include <iostream>  // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å–æ–ª—å—é (cout, cin)
#include <string>    // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
#include <limits>    // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–º–∏—Ç–∞–º–∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
#include <cmath>     // –î–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π (–ª–æ–≥–∞—Ä–∏—Ñ–º, –ø–æ—Ç–æ–ª–æ–∫)

/*
 * –ö–õ–ê–°–° NumberAkinator - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
 * 
 * –ö–ª–∞—Å—Å - —ç—Ç–æ —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤. –û–Ω –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç:
 * - –î–∞–Ω–Ω—ã–µ (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ-—á–ª–µ–Ω—ã)
 * - –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (–º–µ—Ç–æ–¥—ã)
 * 
 * –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∞:
 * - –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è (—Å–∫—Ä—ã—Ç–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏)
 * - –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞
 * - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
 */
class NumberAkinator {
private:  // –ó–∞–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ - –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã
    int minRange;           // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ–∏—Å–∫–∞
    int maxRange;           // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ–∏—Å–∫–∞
    int originalMinRange;   // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
    int originalMaxRange;   // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
    int attempts;           // –°—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    int maxAttempts;        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    int userNumber;         // –ß–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —É–≥–∞–¥–∞–ª –∫–æ–º–ø—å—é—Ç–µ—Ä (–µ—Å–ª–∏ —É–≥–∞–¥–∞–ª)
    bool numberGuessed;     // –§–ª–∞–≥: —É–≥–∞–¥–∞–ª –ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä —á–∏—Å–ª–æ (true/false)

public:  // –û—Ç–∫—Ä—ã—Ç—ã–µ –º–µ—Ç–æ–¥—ã - –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑–≤–Ω–µ –∫–ª–∞—Å—Å–∞
    /*
     * –ö–û–ù–°–¢–†–£–ö–¢–û–† - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
     */
    NumberAkinator() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        minRange = 1;
        maxRange = 100;
        originalMinRange = 1;
        originalMaxRange = 100;
        attempts = 0;
        maxAttempts = 5;      // –ì–ª–∞–≤–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏–≥—Ä—ã!
        userNumber = -1;      // -1 –æ–∑–Ω–∞—á–∞–µ—Ç "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        numberGuessed = false; // –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ —É–≥–∞–¥–∞–ª–∏
    }

    /*
     * –ú–ï–¢–û–î setRange() - –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –∏–≥—Ä—ã
     * 
     * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã.
     * –†–∞–∑–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏–º–µ—é—Ç —Ä–∞–∑–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
     * - –ú–∞–ª–µ–Ω—å–∫–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã (1-8) - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ
     * - –ë–æ–ª—å—à–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã (1-100) - —Ä–µ–∂–∏–º –≤—ã–∑–æ–≤–∞
     */
    void setRange() {
        std::cout << "\n=== –ù–ê–°–¢–†–û–ô–ö–ê –î–ò–ê–ü–ê–ó–û–ù–ê (–ú–ê–ö–°. 5 –ü–û–ü–´–¢–û–ö) ===" << std::endl;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        std::cout << "1. –û—á–µ–Ω—å –ª–µ–≥–∫–∏–π (1-8)   - 3 –ø–æ–ø—ã—Ç–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ" << std::endl;
        std::cout << "2. –õ–µ–≥–∫–∏–π (1-16)        - 4 –ø–æ–ø—ã—Ç–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ" << std::endl;
        std::cout << "3. –°—Ä–µ–¥–Ω–∏–π (1-32)       - 5 –ø–æ–ø—ã—Ç–æ–∫ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ" << std::endl;
        std::cout << "4. –°–ª–æ–∂–Ω—ã–π (1-50)       - 5 –ø–æ–ø—ã—Ç–æ–∫ (–≤—ã–∑–æ–≤!)" << std::endl;
        std::cout << "5. –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π (1-100) - 5 –ø–æ–ø—ã—Ç–æ–∫ (–±–æ–ª—å—à–æ–π –≤—ã–∑–æ–≤!)" << std::endl;
        std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω (1-5): ";

        int choice;
        
        /*
         * –í–ê–õ–ò–î–ê–¶–ò–Ø –í–í–û–î–ê - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
         * 
         * –¶–∏–∫–ª while –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ.
         * –£—Å–ª–æ–≤–∏–µ: –ù–ï —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–æ –ò–õ–ò —á–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-5
         * 
         * std::cin >> choice - –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–æ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
         * –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false
         */
        while (!(std::cin >> choice) || choice < 1 || choice > 5) {
            std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5: ";
            
            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ—à–∏–±–∫–∏ –≤–≤–æ–¥–∞
            std::cin.clear();
            
            // –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤–≤–æ–¥–∞
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        }

        /*
         * SWITCH-CASE - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
         * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º if-else
         * 
         * –ö–∞–∂–¥—ã–π case —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π choice
         */
        switch (choice) {
            case 1:
                minRange = 1; maxRange = 8; 
                maxAttempts = 3;  // –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-8 –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 3 –ø–æ–ø—ã—Ç–æ–∫
                std::cout << "üéØ –õ–µ–≥–∫–∏–π —Ä–µ–∂–∏–º: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ –∑–∞ 3 –ø–æ–ø—ã—Ç–∫–∏!" << std::endl;
                break;  // –í—ã—Ö–æ–¥–∏–º –∏–∑ switch
            case 2:
                minRange = 1; maxRange = 16;
                maxAttempts = 4;  // –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-16 –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 4 –ø–æ–ø—ã—Ç–æ–∫
                std::cout << "üéØ –ù–µ–ø–ª–æ—Ö–æ–π –≤—ã–∑–æ–≤: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ –∑–∞ 4 –ø–æ–ø—ã—Ç–∫–∏!" << std::endl;
                break;
            case 3:
                minRange = 1; maxRange = 32;
                maxAttempts = 5;  // –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-32 –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 5 –ø–æ–ø—ã—Ç–æ–∫
                std::cout << "üéØ –•–æ—Ä–æ—à–∏–π –≤—ã–∑–æ–≤: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ –∑–∞ 5 –ø–æ–ø—ã—Ç–æ–∫!" << std::endl;
                break;
            case 4:
                minRange = 1; maxRange = 50;
                maxAttempts = 5;  // –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-50 –Ω—É–∂–Ω–æ 6 –ø–æ–ø—ã—Ç–æ–∫, –Ω–æ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ 5!
                std::cout << "üî• –í–´–ó–û–í! –ü–æ–ø—Ä–æ–±—É—é —É–≥–∞–¥–∞—Ç—å –∑–∞ 5 –ø–æ–ø—ã—Ç–æ–∫ (–º–æ–∂–µ—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è)!" << std::endl;
                break;
            case 5:
                minRange = 1; maxRange = 100;
                maxAttempts = 5;  // –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-100 –Ω—É–∂–Ω–æ 7 –ø–æ–ø—ã—Ç–æ–∫, –Ω–æ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ 5!
                std::cout << "üî•üî• –ë–û–õ–¨–®–û–ô –í–´–ó–û–í! –ü–æ–ø—Ä–æ–±—É—é —É–≥–∞–¥–∞—Ç—å –∑–∞ 5 –ø–æ–ø—ã—Ç–æ–∫ (–æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ)!" << std::endl;
                break;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        originalMinRange = minRange;
        originalMaxRange = maxRange;

        std::cout << "–ó–∞–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç " << minRange << " –¥–æ " << maxRange << std::endl;
        std::cout << "–£ –º–µ–Ω—è –±—É–¥–µ—Ç –ú–ê–ö–°–ò–ú–£–ú " << maxAttempts << " –ø–æ–ø—ã—Ç–æ–∫!" << std::endl;
        
        /*
         * –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ê–°–ß–ï–¢ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ –ø–æ–ø—ã—Ç–æ–∫
         * 
         * totalNumbers - —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
         * –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-8: 8-1+1 = 8 —á–∏—Å–µ–ª
         * 
         * std::log2() - –ª–æ–≥–∞—Ä–∏—Ñ–º –ø–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—é 2
         * std::ceil() - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –¥–æ —Ü–µ–ª–æ–≥–æ
         * 
         * –ü–æ—á–µ–º—É –ª–æ–≥–∞—Ä–∏—Ñ–º? –í –±–∏–Ω–∞—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –º—ã –¥–µ–ª–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ø–æ–ª–∞–º:
         * 8 —á–∏—Å–µ–ª -> 4 —á–∏—Å–ª–∞ -> 2 —á–∏—Å–ª–∞ -> 1 —á–∏—Å–ª–æ = 3 —à–∞–≥–∞
         * log2(8) = 3
         */
        int totalNumbers = maxRange - minRange + 1;
        int theoreticalMin = static_cast<int>(std::ceil(std::log2(totalNumbers)));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ
        if (maxAttempts >= theoreticalMin) {
            std::cout << "‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ!" << std::endl;
        } else {
            std::cout << "‚ö° –†–ï–ñ–ò–ú –í–´–ó–û–í–ê! –ù—É–∂–Ω–∞ —É–¥–∞—á–∞ –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ!" << std::endl;
        }
    }

    // int calculateOptimalAttempts(int range) {
    //     // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª—å—à–µ, —Ç–∞–∫ –∫–∞–∫ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º –≤ 5 –ø–æ–ø—ã—Ç–æ–∫
    //     return 5;
    // }

    /*
     * –ú–ï–¢–û–î makeGuess() - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è
     * 
     * –†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:
     * 1. –ë–µ—Ä–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     * 2. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç—Ç–æ —á–∏—Å–ª–æ
     * 3. –ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
     * 
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
     */
    int makeGuess() {
        attempts++;  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        
        /*
         * –ë–ò–ù–ê–†–ù–´–ô –ü–û–ò–°–ö - –∫–ª—é—á–µ–≤–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º
         * 
         * (minRange + maxRange) / 2 - –Ω–∞—Ö–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞
         * –ü—Ä–∏–º–µ—Ä: –¥–∏–∞–ø–∞–∑–æ–Ω [1, 100], —Å–µ—Ä–µ–¥–∏–Ω–∞ = (1+100)/2 = 50
         * 
         * –ü–æ—á–µ–º—É —Å–µ—Ä–µ–¥–∏–Ω–∞? –≠—Ç–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –º—ã –∏—Å–∫–ª—é—á–∞–µ–º
         * –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
         */
        int guess = (minRange + maxRange) / 2;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        std::cout << "\n--- –ü–û–ü–´–¢–ö–ê " << attempts << " –∏–∑ " << maxAttempts << " ---" << std::endl;
        std::cout << "üß† –¢–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: [" << minRange << ", " << maxRange << "]" << std::endl;
        std::cout << "üéØ –û—Å—Ç–∞–µ—Ç—Å—è " << (maxRange - minRange + 1) << " –≤–æ–∑–º–æ–∂–Ω—ã—Ö —á–∏—Å–µ–ª" << std::endl;
        std::cout << "ü§ñ –ú–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ: " << guess << std::endl;
        
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
        std::cout << "\n–í–∞—à–µ —á–∏—Å–ª–æ:" << std::endl;
        std::cout << "1. –ë–û–õ–¨–®–ï " << guess << std::endl;
        std::cout << "2. –ú–ï–ù–¨–®–ï " << guess << std::endl;
        std::cout << "3. –†–ê–í–ù–û " << guess << " (–£–ì–ê–î–ê–õ!)" << std::endl;
        std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-3): ";

        int response;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª 1, 2 –∏–ª–∏ 3
        while (!(std::cin >> response) || response < 1 || response > 3) {
            std::cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3: ";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        }

        /*
         * –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
         * –ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞
         */
        switch (response) {
            case 1: // –ß–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω–∞—à–µ–≥–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è
                /*
                 * –ï—Å–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ guess, —Ç–æ –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç minRange –¥–æ guess
                 * —Ç–æ—á–Ω–æ –ù–ï –ø–æ–¥—Ö–æ–¥—è—Ç. –ü–æ—ç—Ç–æ–º—É –Ω–æ–≤—ã–π –º–∏–Ω–∏–º—É–º = guess + 1
                 */
                minRange = guess + 1;
                std::cout << "‚úÖ –ü–æ–Ω—è–ª! –í–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ " << guess << std::endl;
                break;
                
            case 2: // –ß–∏—Å–ª–æ –º–µ–Ω—å—à–µ –Ω–∞—à–µ–≥–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è
                /*
                 * –ï—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ guess, —Ç–æ –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç guess –¥–æ maxRange
                 * —Ç–æ—á–Ω–æ –ù–ï –ø–æ–¥—Ö–æ–¥—è—Ç. –ü–æ—ç—Ç–æ–º—É –Ω–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º = guess - 1
                 */
                maxRange = guess - 1;
                std::cout << "‚úÖ –ü–æ–Ω—è–ª! –í–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ " << guess << std::endl;
                break;
                
            case 3: // –£–≥–∞–¥–∞–ª–∏!
                userNumber = guess;      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
                numberGuessed = true;    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤—ã–∏–≥—Ä–∞–Ω–∞
                std::cout << "üéâ –û—Ç–ª–∏—á–Ω–æ! –Ø —É–≥–∞–¥–∞–ª –≤–∞—à–µ —á–∏—Å–ª–æ!" << std::endl;
                break;
        }

        return guess;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    }

    /*
     * –ú–ï–¢–û–î isGameOver() - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
     * 
     * const –≤ –∫–æ–Ω—Ü–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–µ—Ç–æ–¥ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
     * (–Ω–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ-—á–ª–µ–Ω—ã –∫–ª–∞—Å—Å–∞)
     * 
     * –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ –¥–≤—É—Ö —Å–ª—É—á–∞—è—Ö:
     * 1. –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏
     * 2. –ß–∏—Å–ª–æ —É–≥–∞–¥–∞–Ω–æ
     */
    bool isGameOver() const {
        return attempts >= maxAttempts || numberGuessed;
    }

    /*
     * –ú–ï–¢–û–î hasWon() - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ
     */
    bool hasWon() const {
        return numberGuessed;
    }

    /*
     * –ì–ï–¢–¢–ï–†–´ - –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
     * –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∫–ª–∞—Å—Å–∞ –∏–∑–≤–Ω–µ
     */
    int getAttempts() const {
        return attempts;
    }

    int getMaxAttempts() const {
        return maxAttempts;
    }

    /*
     * –ú–ï–¢–û–î getResultMessage() - —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     * 
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * –í–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
     */
    std::string getResultMessage() const {
        if (numberGuessed) {
            /*
             * –†–ê–°–ß–ï–¢ –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –ê–õ–ì–û–†–ò–¢–ú–ê
             * 
             * –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = (–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º / –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ø—ã—Ç–∫–∏) * 100%
             * 
             * –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
             * –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø—Ä–∏ –∏–¥–µ–∞–ª—å–Ω–æ–º –±–∏–Ω–∞—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ
             * 
             * std::min(100.0, ...) - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞–∫—Å–∏–º—É–º–æ–º 100%
             */
            int totalNumbers = originalMaxRange - originalMinRange + 1;
            int theoreticalMin = static_cast<int>(std::ceil(std::log2(totalNumbers)));
            double efficiency = std::min(100.0, (double)theoreticalMin / attempts * 100);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if (attempts <= theoreticalMin) {
                return "–ò–î–ï–ê–õ–¨–ù–û! –£–≥–∞–¥–∞–ª –∑–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º! üåü";
            } else if (efficiency >= 80) {
                return "–ü–†–ï–í–û–°–•–û–î–ù–û! –û—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ! üéØ";
            } else if (efficiency >= 70) {
                return "–û–¢–õ–ò–ß–ù–û! –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üëç";
            } else if (efficiency >= 50) {
                return "–•–û–†–û–®–û! –°–ø—Ä–∞–≤–∏–ª—Å—è –≤ —Å—Ä–æ–∫! ‚úÖ";
            } else {
                return "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ú–æ–∂–Ω–æ –ª—É—á—à–µ! üìà";
            }
        } else {
            return "–ù–µ —Å–º–æ–≥ —É–≥–∞–¥–∞—Ç—å... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –æ—à–∏–±–ª–∏—Å—å –ª–∏ –≤—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö? ü§î";
        }
    }

    /*
     * –ú–ï–¢–û–î showStatistics() - –ø–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã
     * 
     * –í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö:
     * - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
     * - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞
     * - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–º –º–∏–Ω–∏–º—É–º–æ–º
     */
    void showStatistics() const {
        std::cout << "\n=== –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===" << std::endl;
        
        if (numberGuessed) {
            std::cout << "üéØ –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: " << userNumber << std::endl;
        }
        
        std::cout << "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: " << attempts << " –∏–∑ " << maxAttempts << std::endl;
        
        if (numberGuessed) {
            // –†–∞—Å—á–µ—Ç –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            int totalNumbers = originalMaxRange - originalMinRange + 1;
            int theoreticalMin = static_cast<int>(std::ceil(std::log2(totalNumbers)));
            double efficiency = std::min(100.0, (double)theoreticalMin / attempts * 100);
            
            std::cout << "‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ò–ò: " << efficiency << "%" << std::endl;
            std::cout << "üî¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: " << totalNumbers << " —á–∏—Å–µ–ª (" 
                      << originalMinRange << "-" << originalMaxRange << ")" << std::endl;
            std::cout << "üßÆ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º: " << theoreticalMin << " –ø–æ–ø—ã—Ç–æ–∫" << std::endl;
            std::cout << "üìà –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞: " << (attempts - theoreticalMin) << " –ø–æ–ø—ã—Ç–æ–∫" << std::endl;
            
            // –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if (efficiency >= 100) {
                std::cout << "üèÜ –†–ï–ö–û–†–î! –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∏–Ω–∏–º—É–º!" << std::endl;
            } else if (efficiency >= 80) {
                std::cout << "ü•á –û–¢–õ–ò–ß–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ!" << std::endl;
            } else if (efficiency >= 70) {
                std::cout << "ü•à –•–û–†–û–®–ò–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!" << std::endl;
            } else if (efficiency >= 50) {
                std::cout << "ü•â –ù–ï–ü–õ–û–•–û! –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!" << std::endl;
            }
        } else {
            std::cout << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≥–∞–¥–∞—Ç—å –≤ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è" << std::endl;
        }
    }

    /*
     * –ú–ï–¢–û–î validateRange() - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     * 
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å—Ç–∞–ª –ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–º.
     * –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã.
     * 
     * –ù–∞–ø—Ä–∏–º–µ—Ä:
     * 1. –ö–æ–º–ø—å—é—Ç–µ—Ä: "50?" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ë–æ–ª—å—à–µ"
     * 2. –ö–æ–º–ø—å—é—Ç–µ—Ä: "75?" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ú–µ–Ω—å—à–µ" 
     * 3. –ö–æ–º–ø—å—é—Ç–µ—Ä: "62?" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ú–µ–Ω—å—à–µ"
     * 4. –ö–æ–º–ø—å—é—Ç–µ—Ä: "56?" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ë–æ–ª—å—à–µ"
     * –¢–µ–ø–µ—Ä—å –¥–∏–∞–ø–∞–∑–æ–Ω [57, 61], –Ω–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—è—Ç—å —Å–∫–∞–∂–µ—Ç "–º–µ–Ω—å—à–µ",
     * —Ç–æ minRange —Å—Ç–∞–Ω–µ—Ç –±–æ–ª—å—à–µ maxRange - —ç—Ç–æ –æ—à–∏–±–∫–∞!
     */
    bool validateRange() const {
        if (minRange > maxRange) {
            std::cout << "‚ö†Ô∏è  –û–®–ò–ë–ö–ê: –ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω!" << std::endl;
            std::cout << "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –¥–∞–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã." << std::endl;
            std::cout << "–¢–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: [" << minRange << ", " << maxRange << "]" << std::endl;
            return false;
        }
        return true;
    }

    /*
     * –ú–ï–¢–û–î showThinking() - –ø–æ–∫–∞–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è" –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
     * 
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–∞–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é
     * –î–µ–ª–∞–µ—Ç –∏–≥—Ä—É –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∏ –ø–æ–Ω—è—Ç–Ω–æ–π
     */
    void showThinking() const {
        int remaining = maxRange - minRange + 1;  // –°–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª –æ—Å—Ç–∞–ª–æ—Å—å
        std::cout << "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... –û—Å—Ç–∞–ª–æ—Å—å " << remaining << " –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [" 
                  << minRange << ", " << maxRange << "]" << std::endl;
        
        // –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        if (remaining <= 3) {
            std::cout << "üéØ –£–∂–µ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ! –°–µ–π—á–∞—Å —Ç–æ—á–Ω–æ —É–≥–∞–¥–∞—é!" << std::endl;
        } else if (remaining <= 10) {
            std::cout << "üî• –î–∏–∞–ø–∞–∑–æ–Ω —Å—É–∑–∏–ª—Å—è! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!" << std::endl;
        }
    }

    /*
     * –ú–ï–¢–û–î showPrediction() - –ø–æ–∫–∞–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ö–æ–¥—ã
     * 
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç,
     * —É–¥–∞—Å—Ç—Å—è –ª–∏ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –≤ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ø—ã—Ç–∫–∏
     */
    void showPrediction() const {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
        if (!numberGuessed && attempts < maxAttempts) {
            int remaining = maxRange - minRange + 1;        // –û—Å—Ç–∞–ª–æ—Å—å —á–∏—Å–µ–ª
            int attemptsLeft = maxAttempts - attempts;      // –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫
            int theoreticalMin = static_cast<int>(std::ceil(std::log2(remaining)));  // –ú–∏–Ω–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: —Ö–≤–∞—Ç–∏—Ç –ª–∏ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è?
            if (attemptsLeft >= theoreticalMin) {
                std::cout << "üí° –ü—Ä–æ–≥–Ω–æ–∑: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–≥—É —É–≥–∞–¥–∞—Ç—å –∑–∞ " << theoreticalMin << " –ø–æ–ø—ã—Ç–æ–∫!" << std::endl;
            } else {
                std::cout << "‚ö° –ö–†–ò–¢–ò–ß–ù–û! –ü–æ–ø—ã—Ç–æ–∫ –º–∞–ª–æ, –Ω—É–∂–Ω–æ –±—ã—Ç—å –æ—á–µ–Ω—å —Ç–æ—á–Ω—ã–º!" << std::endl;
                if (attemptsLeft == 1) {
                    std::cout << "üéØ –ü–û–°–õ–ï–î–ù–ò–ô –®–ê–ù–°! –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ—à–∞—é—â–∞—è!" << std::endl;
                }
            }
        }
    }
};

/*
 * –§–£–ù–ö–¶–ò–Ø showWelcome() - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
 * 
 * –≠—Ç–æ –æ–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–Ω–µ –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞).
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –∏ –ø—Ä–∞–≤–∏–ª–∞.
 * 
 * –ü–æ—á–µ–º—É –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è? –ü–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ —Å–≤—è–∑–∞–Ω–æ
 * —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –∏–≥—Ä—ã - —ç—Ç–æ –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.
 */
void showWelcome() {
    // –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –ø–æ–º–æ—â—å—é —Å–∏–º–≤–æ–ª–æ–≤ –ø—Å–µ–≤–¥–æ–≥—Ä–∞—Ñ–∏–∫–∏
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << std::endl;
    std::cout << "‚ïë  –°–£–ü–ï–† –¢–û–ß–ù–´–ô –ß–ò–°–õ–û–í–û–ô –ê–ö–ò–ù–ê–¢–û–† üéØ  ‚ïë" << std::endl;
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << std::endl;
    
    // –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–≥—Ä—ã
    std::cout << "\n–¢–µ–º–∞: –ö–æ–º–ø—å—é—Ç–µ—Ä —É–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" << std::endl;
    std::cout << "–∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫." << std::endl;
    std::cout << "\nüéØ –ì–õ–ê–í–ù–û–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï: –ú–ê–ö–°–ò–ú–£–ú 5 –ü–û–ü–´–¢–û–ö!" << std::endl;
    
    // –û–ø–∏—Å–∞–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    std::cout << "\nüîç –û–°–û–ë–ï–ù–ù–û–°–¢–ò –ê–õ–ì–û–†–ò–¢–ú–ê:" << std::endl;
    std::cout << "‚Ä¢ –°—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - –Ω–µ –±–æ–ª–µ–µ 5 –ø–æ–ø—ã—Ç–æ–∫" << std::endl;
    std::cout << "‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç" << std::endl;
    std::cout << "‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–ª—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤" << std::endl;
    std::cout << "‚Ä¢ –†–µ–∂–∏–º –≤—ã–∑–æ–≤–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤" << std::endl;
    
    // –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
    std::cout << "\n–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:" << std::endl;
    std::cout << "‚Ä¢ –í–´ –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç–µ —á–∏—Å–ª–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ" << std::endl;
    std::cout << "‚Ä¢ –Ø —É–≥–∞–¥—ã–≤–∞—é –∑–∞ –ú–ê–ö–°–ò–ú–£–ú 5 –ø–æ–ø—ã—Ç–æ–∫" << std::endl;
    std::cout << "‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ: –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ/—É–≥–∞–¥–∞–ª" << std::endl;
    std::cout << "‚Ä¢ –î–ª—è –º–∞–ª—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ - 100% –≥–∞—Ä–∞–Ω—Ç–∏—è!" << std::endl;
    std::cout << "‚Ä¢ –î–ª—è –±–æ–ª—å—à–∏—Ö - –Ω–∞—Å—Ç–æ—è—â–∏–π –≤—ã–∑–æ–≤! üî•" << std::endl;
}

/*
 * –§–£–ù–ö–¶–ò–Ø askPlayAgain() - –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–≥—Ä—É
 * 
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç false, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏
 * 
 * –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bool (–±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ) - true –∏–ª–∏ false
 */
bool askPlayAgain() {
    std::cout << "\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –µ—â–µ —Ä–∞–∑? (y/n): ";
    std::string choice;  // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    std::cin >> choice;  // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
    
    /*
     * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
     * - "y" –∏–ª–∏ "Y" (–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ)
     * - "–¥" –∏–ª–∏ "–î" (—Ä—É—Å—Å–∫–∏–µ - "–¥–∞")
     * 
     * –û–ø–µ—Ä–∞—Ç–æ—Ä || –æ–∑–Ω–∞—á–∞–µ—Ç "–ò–õ–ò"
     */
    return (choice == "y" || choice == "Y" || choice == "–¥" || choice == "–î");
}

/*
 * –§–£–ù–ö–¶–ò–Ø waitForUser() - –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * –î–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å –∏ –∑–∞–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ
 * –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∂–¥–µ—Ç –Ω–∞–∂–∞—Ç–∏—è Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
 */
void waitForUser() {
    std::cout << "\n–ù–∞–∂–º–∏—Ç–µ Enter, –∫–æ–≥–¥–∞ –∑–∞–≥–∞–¥–∞–µ—Ç–µ —á–∏—Å–ª–æ...";
    
    /*
     * std::cin.ignore() - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –≤ –±—É—Ñ–µ—Ä–µ –≤–≤–æ–¥–∞
     * –ù—É–∂–Ω–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±—É—Ñ–µ—Ä–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–≤–æ–¥–æ–≤
     * 
     * std::cin.get() - –∂–¥–µ—Ç –≤–≤–æ–¥–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (Enter)
     */
    std::cin.ignore();
    std::cin.get();
}

/*
 * –§–£–ù–ö–¶–ò–Ø main() - –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
 * 
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É. –í—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ C++ –Ω–∞—á–∏–Ω–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—Å—é–¥–∞.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç int (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ) - –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:
 * - 0 –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
 * - –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—à–∏–±–∫—É
 */
int main() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
    showWelcome();
    
    /*
     * –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ò–ì–†–´
     * 
     * do-while - —Ü–∏–∫–ª —Å –ø–æ—Å—Ç—É—Å–ª–æ–≤–∏–µ–º. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —Ä–∞–∑,
     * –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —É—Å–ª–æ–≤–∏–µ. –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ, —Ü–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è.
     * 
     * –≠—Ç–æ –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–ª—É—á–∞—è: –º—ã —Ö–æ—Ç–∏–º —Å—ã–≥—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∏–≥—Ä—É,
     * –∞ –∑–∞—Ç–µ–º —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–∞—Ç—å –µ—â–µ.
     */
    do {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        NumberAkinator akinator;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∏–≥—Ä—ã
        akinator.setRange();
        
        // –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ
        std::cout << "\nüéØ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–≥–∞–¥–∞–π—Ç–µ –ª—é–±–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ." << std::endl;
        waitForUser();  // –ñ–¥–µ–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥–∞–¥–∞–µ—Ç —á–∏—Å–ª–æ
        
        std::cout << "\n=== –ù–ê–ß–ò–ù–ê–Æ –£–ú–ù–û–ï –£–ì–ê–î–´–í–ê–ù–ò–ï ===" << std::endl;
        
        /*
         * –¶–ò–ö–õ –£–ì–ê–î–´–í–ê–ù–ò–Ø
         * 
         * –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–≥–∞–¥—ã–≤–∞—Ç—å, –ø–æ–∫–∞ –∏–≥—Ä–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è
         * (–ª–∏–±–æ —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ, –ª–∏–±–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏)
         */
        while (!akinator.isGameOver()) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            if (!akinator.validateRange()) {
                std::cout << "–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö." << std::endl;
                break;  // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
            }
            
            // –î–µ–ª–∞–µ–º –ø–æ–ø—ã—Ç–∫—É —É–≥–∞–¥–∞—Ç—å
            akinator.makeGuess();
            
            // –ï—Å–ª–∏ –µ—â–µ –Ω–µ —É–≥–∞–¥–∞–ª–∏ –∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if (!akinator.hasWon() && !akinator.isGameOver()) {
                akinator.showThinking();    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è" –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
                akinator.showPrediction();  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        if (akinator.validateRange()) {
            // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã
            std::cout << "\n" << akinator.getResultMessage() << std::endl;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            akinator.showStatistics();
            
            // –ï—Å–ª–∏ –Ω–µ —É–≥–∞–¥–∞–ª–∏, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∫–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ
            if (!akinator.hasWon()) {
                std::cout << "\nü§ñ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –ö–∞–∫–æ–µ —á–∏—Å–ª–æ –≤—ã –∑–∞–≥–∞–¥–∞–ª–∏? ";
                int actualNumber;
                if (std::cin >> actualNumber) {  // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–æ
                    std::cout << "–ê–≥–∞, " << actualNumber << "! –≠—Ç–æ –±—ã–ª–æ —Å–ª–æ–∂–Ω–æ, –Ω–æ —è —É—á—É—Å—å! üß†" << std::endl;
                }
            }
        }
        
    } while (askPlayAgain());  // –ü–æ–≤—Ç–æ—Ä—è–µ–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å
    
    // –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    std::cout << "\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞! ü§ñüéØ" << std::endl;
    
    return 0;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
}

/*
 * –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ö–õ–Æ–ß–ï–í–´–ï –ö–û–ù–¶–ï–ü–¶–ò–ò, –ö–û–¢–û–†–´–ï –ú–´ –ò–ó–£–ß–ò–õ–ò
 * 
 * 1. –ö–õ–ê–°–°–´ –ò –û–ë–™–ï–ö–¢–´:
 *    - –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ—Ç–æ–¥–æ–≤
 *    - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 *    - –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∏ –ø—É–±–ª–∏—á–Ω—ã–µ —á–ª–µ–Ω—ã
 * 
 * 2. –ê–õ–ì–û–†–ò–¢–ú–´:
 *    - –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 *    - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
 *    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
 * 
 * 3. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –í–í–û–î:
 *    - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 *    - –†–∞–±–æ—Ç–∞ —Å –±—É—Ñ–µ—Ä–æ–º –≤–≤–æ–¥–∞
 *    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∫–æ–Ω—Å–æ–ª–∏
 * 
 * 4. –°–¢–†–£–ö–¢–£–†–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:
 *    - –¶–∏–∫–ª—ã while –∏ do-while
 *    - –£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ if –∏ switch
 *    - –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
 * 
 * 5. –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê –í –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ò:
 *    - –õ–æ–≥–∞—Ä–∏—Ñ–º—ã –∏ —Å—Ç–µ–ø–µ–Ω–∏
 *    - –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
 *    - –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
 * 
 * –≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
 * —Å —Ö–æ—Ä–æ—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
 */ 